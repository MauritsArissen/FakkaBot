name: CI/CD Pipeline

on:
  push:
    branches:
      - feature/container-deployment

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Concat prisma schema
        run: npm run prisma:concat_prd

      - name: Generate prisma client
        run: npm run prisma:generate

      - name: Build the project
        run: npm run build

      - name: Get repository and owner names
        id: repo-info
        run: |
          REPO_NAME=$(basename $GITHUB_REPOSITORY)
          REPO_OWNER=$(dirname $GITHUB_REPOSITORY | cut -d'/' -f1)
          echo "::set-output name=repo_name::${REPO_NAME,,}"
          echo "::set-output name=repo_owner::${REPO_OWNER,,}"

      - name: Build Docker image
        run: docker build -t ghcr.io/${{ steps.repo-info.outputs.repo_owner }}/${{ steps.repo-info.outputs.repo_name }}:latest .

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push Docker image to GitHub Container Registry
        run: docker push ghcr.io/${{ steps.repo-info.outputs.repo_owner }}/${{ steps.repo-info.outputs.repo_name }}:latest

      - name: Start SSH agent
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Copy .env file to VPS
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
          ENV_FILE_CONTENT: ${{ secrets.ENV_FILE_CONTENT }}
        run: |
          echo "$ENV_FILE_CONTENT" > .env
          scp -o StrictHostKeyChecking=no .env $SSH_USERNAME@$SSH_HOST:/home/$SSH_USERNAME/mauritsarissen/fakkabot/.env


      # - name: Copy .env file to VPS
      #   env:
      #     SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      #     SSH_HOST: ${{ secrets.SSH_HOST }}
      #     SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
      #     ENV_FILE_CONTENT: ${{ secrets.ENV_FILE_CONTENT }}
      #   run: |
      #     echo "$SSH_PRIVATE_KEY" | ssh-add -
      #     echo "$ENV_FILE_CONTENT" > .env
      #     scp -o StrictHostKeyChecking=no .env $SSH_USERNAME@$SSH_HOST:/home/$SSH_USERNAME/${{ steps.repo-info.outputs.repo_owner }}/${{ steps.repo-info.outputs.repo_name }}/.env

      # - name: Deploy Docker image to VPS
      #   env:
      #     SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      #     SSH_HOST: ${{ secrets.SSH_HOST }}
      #     SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     echo "$SSH_PRIVATE_KEY" | ssh-add -
      #     ssh -o StrictHostKeyChecking=no $SSH_USERNAME@$SSH_HOST 'echo $GITHUB_TOKEN | docker login ghcr.io -u $GITHUB_USERNAME --password-stdin'
      #     ssh -o StrictHostKeyChecking=no $SSH_USERNAME@$SSH_HOST 'docker pull ghcr.io/${{ github.repository_owner }}/${{ steps.repo-name.outputs.repo }}:latest'
      #     ssh -o StrictHostKeyChecking=no $SSH_USERNAME@$SSH_HOST 'docker stop ${{ steps.repo-info.outputs.repo_name }} || true && docker rm ${{ steps.repo-info.outputs.repo_name }} || true'
      #     ssh -o StrictHostKeyChecking=no $SSH_USERNAME@$SSH_HOST 'docker run -d --env-file /home/$SSH_USERNAME/${{ steps.repo-info.outputs.repo_owner }}/${{ steps.repo-info.outputs.repo_name }}/.env --restart always --name ${{ steps.repo-info.outputs.repo_name }} -p 3000:3000 ghcr.io/${{ github.repository_owner }}/${{ steps.repo-name.outputs.repo }}:latest'
